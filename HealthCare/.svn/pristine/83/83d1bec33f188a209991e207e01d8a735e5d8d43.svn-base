package app.nichepro.fragmenttabpatient.queries;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.text.InputType;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ViewAnimator;
import app.nichepro.HealthCareApp;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.ExpandAnimation;
import app.nichepro.activities.healthcare.R;
import app.nichepro.animation.AnimationFactory;
import app.nichepro.animation.AnimationFactory.FlipDirection;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.CommunicationListResponseObject;
import app.nichepro.model.CommunicationResponseObject;
import app.nichepro.model.KeyValue;
import app.nichepro.model.MessageListResponseObject;
import app.nichepro.model.PartySharingListResponseObject;
import app.nichepro.model.PartySharingResponseObject;
import app.nichepro.model.db.EmailMessage;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class PatientQueryFragment extends BaseFragment implements
		OnClickListener, OnTouchListener, ResponseParserListener {

	private ArrayList<KeyValue> listOfDoctor;
	private ArrayList<String> doctorName;
	public PartySharingListResponseObject doctorListObject;

	protected ArrayList<CharSequence> selectedDoctors = new ArrayList<CharSequence>();
	Button btnMsgList;
	Button btnSendMsg;
	Boolean isToggle;
	String tDoctorName, tSubject, tMessage;
	Dialog progress;
	EditText etFromDoctorName;
	EditText etSubject;
	EditText etMessage;
	Boolean isSelected;
	ViewAnimator viewAnimator;
	ArrayList<MessageListResponseObject> msgArray;
	WebRequestTask ehrRequestTask;
	private ResponseMesssagType msgType;
	private LayoutInflater mInflater;
	private ExpandableListView mMessageList;
	HealthCareApp myApp;
	EmailListAdapter listAdapter;
	boolean isReply;
	private EmailMessage selectedMessage;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		this.mInflater = inflater;
		isSelected = false;
		myApp = (HealthCareApp) getActivity().getApplication();

		View view = inflater.inflate(R.layout.patient_query_screen, container,
				false);
		mMessageList = (ExpandableListView) view
				.findViewById(R.id.patient_communication);
		viewAnimator = (ViewAnimator) view.findViewById(R.id.viewFlipper);

		btnMsgList = (Button) view.findViewById(R.id.msg_list);
		btnSendMsg = (Button) view.findViewById(R.id.send_msg);
		btnMsgList.setSelected(true);
		isToggle = true;
		btnMsgList.setOnClickListener(this);
		btnSendMsg.setOnClickListener(this);

		etFromDoctorName = (EditText) view.findViewById(R.id.bSelect);
		etFromDoctorName.setOnTouchListener(this);
		etFromDoctorName.setInputType(InputType.TYPE_NULL); // disable soft
															// input
		etSubject = (EditText) view.findViewById(R.id.etSubjectMessage);
		etMessage = (EditText) view.findViewById(R.id.etMessageCommunicate);
		Button send = (Button) view.findViewById(R.id.bSendCommunicate);

		send.setOnClickListener(this);
		requestForListMsg();

		// listener for child row click
		mMessageList.setOnChildClickListener(myListItemClicked);
		// listener for group heading click
		mMessageList.setOnGroupClickListener(myListGroupClicked);
		return view;
	}

	void createMessageList() {

		// Creating the list adapter and populating the list
		listAdapter = new EmailListAdapter(mInflater.getContext(), msgArray);

		mMessageList.setAdapter(listAdapter);
	}

	public void sendMessage() {
		if (isToggle == true) {

			AnimationFactory.flipTransition(viewAnimator,
					FlipDirection.LEFT_RIGHT);
			btnMsgList.setTextColor(Color.WHITE);
			btnSendMsg.setTextColor(Color.BLACK);
			btnMsgList.setSelected(false);
			btnSendMsg.setSelected(true);
			requestForDoctor();

		}
		isToggle = false;
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {

		case R.id.msg_list:
			if (isToggle == false) {
				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btnMsgList.setTextColor(Color.BLACK);
				btnSendMsg.setTextColor(Color.WHITE);
				btnMsgList.setSelected(true);
				btnSendMsg.setSelected(false);
				requestForListMsg();
			}
			isToggle = true;
			break;
		case R.id.send_msg:
			etFromDoctorName.setText("");
			etSubject.setText("");
			sendMessage();
			break;

		case R.id.bSendCommunicate: {
			requestForSendMsg();

		}
			break;
		}

	}

	public void showSelectColoursDialog() {
		int count = listOfDoctor.size();
		if (count > 0) {
			boolean[] checkedColours = new boolean[listOfDoctor.size()];

			for (int i = 0; i < count; i++) {
				KeyValue kv = listOfDoctor.get(i);
				checkedColours[i] = selectedDoctors.contains(kv.getKey());
			}

			DialogInterface.OnMultiChoiceClickListener coloursDialogListener = new DialogInterface.OnMultiChoiceClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int which,
						boolean isChecked) {
					KeyValue kv = listOfDoctor.get(which);
					if (isChecked) {

						selectedDoctors.add(kv.getKey());
					} else {
						selectedDoctors.remove(kv.getKey());
					}

					onChangeSelectedColours();
				}
			};

			AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
			builder.setTitle("Select Colours");
			CharSequence s[] = doctorName.toArray(new CharSequence[doctorName
					.size()]);
			builder.setMultiChoiceItems(s, checkedColours,
					coloursDialogListener);
			builder.setPositiveButton("Select",
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog,
								int whichButton) {

						}
					});

			AlertDialog dialog = builder.create();
			dialog.show();
		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"You have not engaged with any doctor!",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}

	}

	protected void onChangeSelectedColours() {
		StringBuilder stringBuilder = new StringBuilder();

		int count = listOfDoctor.size();

		for (int i = 0; i < count; i++) {
			KeyValue kv = listOfDoctor.get(i);
			if (selectedDoctors.contains(kv.getKey())) {
				stringBuilder.append(kv.getValue() + ";");
			}
		}

		etFromDoctorName.setText(stringBuilder.toString());
	}

	@Override
	public boolean onTouch(View v, MotionEvent event) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.bSelect: {
			if (MotionEvent.ACTION_UP == event.getAction()) {
				showSelectColoursDialog();
			}
			break;
		}
		default:
			break;
		}

		return false;
	}

	public void requestForSendMsg() {

		if (selectedDoctors.size() == 0) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"Please select a doctor", R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else if (etSubject.getText().toString().length() == 0) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information, "Please add Subject",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else if (etMessage.getText().toString().length() == 0) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information, "Please add Message",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else {

			String ccString = null;
			int size = selectedDoctors.size();
			if (size > 1) {

				for (int i = 1; i < size; i++) {
					if (i == 1) {
						ccString = selectedDoctors.get(1).toString();
					} else
						ccString += ";" + selectedDoctors.get(i).toString();
				}
			}

			ehrRequestTask = new WebRequestTask(
					WebLinks.getLink(WebLinks.CreateCommunication),
					getActivity(), this);

			ehrRequestTask.AddParam(Constants.PARAM_partyIdFrom, myApp
					.getLoggedInUser().getPartyId());
			ehrRequestTask.AddParam(Constants.PARAM_partyIdTo, selectedDoctors
					.get(0).toString());
			ehrRequestTask.AddParam(Constants.PARAM_subject, etSubject.getText()
					.toString());
			ehrRequestTask.AddParam(Constants.PARAM_content, etMessage.getText()
					.toString());

			if (ccString != null) {
				ehrRequestTask.AddParam(Constants.PARAM_ccString, ccString);

			}
			ehrRequestTask.execute();
		}
	}

	public void requestForListMsg() {
		ehrRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.ListCommunication), getActivity(),
				this);

		ehrRequestTask.AddParam(Constants.PARAM_partyIdFrom, myApp
				.getLoggedInUser().getPartyId());
		// ehrRequestTask.AddParam(Constants.PARAM_partyIdTo, myApp
		// .getLoggedInUser().getPartyId());
		ehrRequestTask.execute();
	}

	public void requestForDoctor() {
		ehrRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.ListOfCCRSharing), getActivity(),
				this);
		ehrRequestTask.AddParam(Constants.PARAM_partyIdFrom, myApp
				.getLoggedInUser().getPartyId());

		ehrRequestTask.execute();
	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
		if (this.msgType == ResponseMesssagType.CommunicationEventCreatedMessageType) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"Your message has sent successfully",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else if (this.msgType == ResponseMesssagType.listCCRSharingMessageType) {
			if (items != null && !items.isEmpty() && items.size() > 0) {
				listOfDoctor = new ArrayList<KeyValue>();
				doctorName = new ArrayList<String>();
				this.doctorListObject = (PartySharingListResponseObject) items
						.get(0);
				for (PartySharingResponseObject msg : this.doctorListObject.CCRSharingList) {
					KeyValue kv = new KeyValue();
					kv.setKey(msg.partyIdTo);
					if (msg.doctorName != null) {
						kv.setValue(msg.doctorName);

					} else
						kv.setValue("Name not found");
					doctorName.add(kv.getValue());

					listOfDoctor.add(kv);

					if (selectedMessage != null
							&& selectedMessage.PartyIdTo != null
							&& !selectedMessage.PartyIdTo.isEmpty()
							&& msg.partyIdTo.compareTo(selectedMessage.PartyIdTo) == 0) {

						if (isReply == true) {
							isReply = false;
							selectedDoctors.add(kv.getKey());
							etSubject.setText(selectedMessage.SUBJECT);
							etFromDoctorName.setText(kv.getValue());
						}
					}

				}
			} else {
				UIUtilities.showConfirmationAlert(getActivity(),
						R.string.dialog_title_information,
						"No Physician found", R.string.dialog_button_Ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {

							}
						});
			}
		} else if (this.msgType == ResponseMesssagType.CommunicationEventListMessageType) {

			msgArray = new ArrayList<MessageListResponseObject>();
			CommunicationListResponseObject clro = (CommunicationListResponseObject) items
					.get(0);
			if (items != null && !items.isEmpty() && items.size() > 0) {
				if (clro.CommunicationEventList.size() > 0) {
					for (CommunicationResponseObject element : clro.CommunicationEventList) {
						EmailMessage em = new EmailMessage();
						em.USERNAME = element.doctorName;
						em.MESSAGE = element.content;
						em.SUBJECT = element.subject;
						em.TIME = element.createdStamp;
						em.PartyIdFrom = element.partyIdFrom;
						em.PartyIdTo = element.partyIdTo;
						if (msgArray.size() == 0) {
							MessageListResponseObject mlro = new MessageListResponseObject();
							mlro.msgList = new ArrayList<EmailMessage>();
							mlro.msgList.add(em);
							msgArray.add(mlro);
						} else {
							MessageListResponseObject mlro = msgArray
									.get(msgArray.size() - 1);
							EmailMessage msg = mlro.msgList.get(mlro.msgList
									.size() - 1);
							if (msg.getSUBJECT().toString()
									.compareTo(em.getSUBJECT().toString()) == 0) {
								mlro.msgList.add(em);
							} else {
								MessageListResponseObject mlro1 = new MessageListResponseObject();
								mlro1.msgList = new ArrayList<EmailMessage>();
								mlro1.msgList.add(em);
								msgArray.add(mlro1);
							}
						}

					}
					createMessageList();
				} else {
					UIUtilities.showConfirmationAlert(getActivity(),
							R.string.dialog_title_information,
							"Your message box is emptly!",
							R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {

								}
							});
				}
			} else {
				UIUtilities.showConfirmationAlert(getActivity(),
						R.string.dialog_title_information,
						"Your message box is emptly!",
						R.string.dialog_button_Ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {

							}
						});
			}
		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information, R.string.server_error,
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}
	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub
		UIUtilities.showConfirmationAlert(getActivity(),
				R.string.dialog_title_information, ex.getMessage(),
				R.string.dialog_button_Ok,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {

					}
				});
	}

	public ResponseMesssagType getMsgType() {
		return msgType;
	}

	public void setMsgType(ResponseMesssagType msgType) {
		this.msgType = msgType;
	}

	// method to expand all groups
	private void expandAll() {
		int count = listAdapter.getGroupCount();
		for (int i = 0; i < count; i++) {
			mMessageList.expandGroup(i);
		}
	}

	// method to collapse all groups
	private void collapseAll() {
		int count = listAdapter.getGroupCount();
		for (int i = 0; i < count; i++) {
			mMessageList.collapseGroup(i);
		}
	}

	// our child listener
	private OnChildClickListener myListItemClicked = new OnChildClickListener() {

		public boolean onChildClick(ExpandableListView parent, View v,
				int groupPosition, int childPosition, long id) {

			MessageListResponseObject mlro = msgArray.get(groupPosition);
			EmailMessage msg = mlro.msgList.get(childPosition);
			LinearLayout linearLAyout = (LinearLayout) v
					.findViewById(R.id.message_detail);
			// linearLAyout.setVisibility(View.VISIBLE);
			TextView user = (TextView) v.findViewById(R.id.user);
			TextView email = (TextView) v.findViewById(R.id.emailTxt);
			TextView subject = (TextView) v.findViewById(R.id.subject);

			Button reply = (Button) v.findViewById(R.id.bSendEmail);
			reply.setTag(groupPosition + "," + childPosition);
			if (msg != null) {
				user.setText(msg.getUSERNAME());
				subject.setText(msg.getSUBJECT());
				email.setText(msg.getMESSAGE());
			}
			// Creating the expand animation for the item
			ExpandAnimation expandAni = new ExpandAnimation(linearLAyout, 500);

			// Start the animation on the toolbar
			linearLAyout.startAnimation(expandAni);
			reply.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					isReply = true;
					String str = (String) v.getTag();
					int group = -1;
					int child = -1;
					if (str != null && !str.isEmpty()) {
						String token[] = str.split(",");
						group = Integer.parseInt(token[0]);
						child = Integer.parseInt(token[1]);
						MessageListResponseObject mlro = msgArray.get(group);
						EmailMessage msg = mlro.msgList.get(child);
						selectedMessage = msg;
					}
					sendMessage();
				}
			});
			return false;
		}

	};

	// our group listener
	private OnGroupClickListener myListGroupClicked = new OnGroupClickListener() {

		public boolean onGroupClick(ExpandableListView parent, View v,
				int groupPosition, long id) {

			// get the group header

			return false;
		}

	};
}
