package app.nichepro.fragmenttabpatient.info;

import java.util.ArrayList;

import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import app.nichepro.HealthCareApp;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.R;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.SymtomListResponseObject;
import app.nichepro.model.SymtomPatientListResponseObject;
import app.nichepro.model.SymtomResponseObject;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.UpdateUiFromAdapterListener;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class PatientInfoSymptomFragment extends BaseFragment implements
		ResponseParserListener, UpdateUiFromAdapterListener {
	private SymtomListResponseObject mSymtomsList;
	private SymtomPatientListResponseObject mPatientSymtomsList;

	public SymtomPatientListResponseObject getmPatientSymtomsList() {
		return mPatientSymtomsList;
	}

	public void setmPatientSymtomsList(
			SymtomPatientListResponseObject mPatientSymtomsList) {
		this.mPatientSymtomsList = mPatientSymtomsList;
	}

	private WebRequestTask symtomRequestTask;
	private ResponseMesssagType msgType;
	private HealthCareApp myApp;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.patient_info_symptoms, container,
				false);
		myApp = (HealthCareApp) getActivity().getApplication();
		ListView list = (ListView) view.findViewById(R.id.symptomslist);

		// Creating the list adapter and populating the list
		ArrayAdapter<SymtomResponseObject> listAdapter = new SymptomListAdapter(
				inflater.getContext(), inflater, R.layout.symptom_list_cell,
				this);

		if (mSymtomsList != null) {
			for (SymtomResponseObject element : getmSymtomsList().RESPONSE) {
				listAdapter.add(element);

			}
		}

		if (mPatientSymtomsList != null) {
			for (SymtomResponseObject element : mPatientSymtomsList._PATIENT_SYMOTOM_LIST_) {
				listAdapter.add(element);

			}
		}

		list.setAdapter(listAdapter);
		Button btn = (Button) view.findViewById(R.id.bSubmit);
		btn.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				requestForSubmit();
			}
		});
		return view;
	}

	void requestForSubmit() {
		symtomRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.CreatePatientSymtom), getActivity(),
				this);
		symtomRequestTask.AddParam(Constants.PARAM_patientId, myApp
				.getLoggedInUser().getPartyId());
		String description = null;
		String symId = null;
		for (SymtomResponseObject element : getmSymtomsList().RESPONSE) {
			if (element.isSelected == true) {
				if (description == null) {
					description = element.description;
					symId = element.symptomId;
				} else {
					description += "," + element.description;
					symId += "," + element.symptomId;
				}

			}
		}

		if (description != null) {
			symtomRequestTask
					.AddParam(Constants.PARAM_description, description);
			symtomRequestTask
					.AddParam(Constants.PARAM_symptomId, symId);
			symtomRequestTask.execute();

		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"You have not selected any symtoms fromt he list!",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}
	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
		if (this.msgType == ResponseMesssagType.PatientSymtomsCreatedMessageType) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"Your Symtoms has been updated in to the system!",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information, R.string.server_error,
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}
	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateUI(String message) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateUI(int position) {
		// TODO Auto-generated method stub
		if (getmSymtomsList().RESPONSE.size() > position) {
			SymtomResponseObject sro = getmSymtomsList().RESPONSE.get(position);
			if (sro.isSelected == false) {
				sro.isSelected = true;
			} else
				sro.isSelected = false;
		}
	}

	public SymtomListResponseObject getmSymtomsList() {
		return mSymtomsList;
	}

	public void setmSymtomsList(SymtomListResponseObject mSymtomsList) {
		this.mSymtomsList = mSymtomsList;
	}

	@Override
	public void updateUI(String message, int position) {
		// TODO Auto-generated method stub
		
	}

}
