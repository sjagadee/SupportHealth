package app.nichepro.fragmenttabpatient.info;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import app.nichepro.HealthCareApp;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.R;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.ErrorResponseObject;
import app.nichepro.model.SymtomListResponseObject;
import app.nichepro.model.SymtomPatientListResponseObject;
import app.nichepro.model.SymtomResponseObject;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.EnumFactory.SymTomType;
import app.nichepro.util.MenuDialog;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.UpdateUiFromAdapterListener;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class PatientInfoSymptomFragment extends BaseFragment implements
		ResponseParserListener, UpdateUiFromAdapterListener {
	private SymtomListResponseObject mSymtomsList;
	private SymtomPatientListResponseObject mPatientSymtomsList;
	private SymtomResponseObject mSelectedSymtom;
	private boolean isFromEHR;
	private ListView mListView;
	private ArrayAdapter<SymtomResponseObject> mlistAdapter;
	private LayoutInflater mInflater;

	public SymtomPatientListResponseObject getmPatientSymtomsList() {
		return mPatientSymtomsList;
	}

	public void setmPatientSymtomsList(
			SymtomPatientListResponseObject mPatientSymtomsList) {
		this.mPatientSymtomsList = mPatientSymtomsList;
	}

	private WebRequestTask symtomRequestTask;
	private ResponseMesssagType msgType;
	private HealthCareApp myApp;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.patient_info_symptoms, container,
				false);
		mInflater = inflater;
		myApp = (HealthCareApp) getActivity().getApplication();
		Button btn = (Button) view.findViewById(R.id.bSubmit);
		mListView = (ListView) view.findViewById(R.id.symptomslist);

		if (isFromEHR) {
			btn.setVisibility(View.GONE);
		} else {
			btn.setOnClickListener(new OnClickListener() {

				@Override
				public void onClick(View v) {
					// TODO Auto-generated method stub
					requestForSubmit();
				}
			});
		}

		populateUI();
		return view;
	}

	public void populateUI() {

		// Creating the list adapter and populating the list
		mlistAdapter = new SymptomListAdapter(mInflater.getContext(),
				mInflater, R.layout.symptom_list_cell, isFromEHR, this);

		if (mSymtomsList != null) {
			for (SymtomResponseObject element : getmSymtomsList().RESPONSE) {
				mlistAdapter.add(element);

			}
		}

		if (mPatientSymtomsList != null) {
			for (SymtomResponseObject element : mPatientSymtomsList._PATIENT_SYMOTOM_LIST_) {
				mlistAdapter.add(element);

			}
		}

		mListView.setAdapter(mlistAdapter);

	}

	void requestForSubmit() {
		symtomRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.CreatePatientSymtom), getActivity(),
				this);
		symtomRequestTask.AddParam(Constants.PARAM_patientId, myApp
				.getLoggedInUser().getPartyId());
		String description = null;
		String symId = null;
		String severityLevel = null;
		String trackDescription = null;
		for (SymtomResponseObject element : getmSymtomsList().RESPONSE) {

			if (element.isSelected == true) {
				if (description == null) {
					description = element.description;
					symId = element.symptomId;
					severityLevel = element.getmSymtomType().toString();
					trackDescription = element.getmDescription();

				} else {
					description += "," + element.description;
					symId += "," + element.symptomId;

					severityLevel += "," + element.getmSymtomType().toString();
					trackDescription += "," + element.getmDescription();
				}
			}
		}

		if (description != null) {
			symtomRequestTask
					.AddParam(Constants.PARAM_description, description);
			symtomRequestTask.AddParam(Constants.PARAM_symptomId, symId);
			symtomRequestTask.AddParam(Constants.PARAM_severityLevel,
					severityLevel);
			symtomRequestTask.AddParam(Constants.PARAM_trackDescription,
					trackDescription);

			symtomRequestTask.execute();

		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"You have not selected any symtoms fromt he list!",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}
	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
		if (this.msgType == ResponseMesssagType.PatientSymtomsCreatedMessageType) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"Your Symtoms has been updated in to the system!",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else if (this.msgType == ResponseMesssagType.ErrorResponseMessageType) {
			if (items != null && !items.isEmpty() && items.size() > 0) {
				ErrorResponseObject ero = (ErrorResponseObject) items.get(0);
				UIUtilities.showErrorWithOkButton(getActivity(), ero.getErrorText());
			} else
				UIUtilities.showServerError(getActivity());

		} else if (this.msgType == ResponseMesssagType.UnknownResponseMessageType) {
			UIUtilities.showServerError(getActivity());
		} else{
			UIUtilities.showServerError(getActivity());
		}
	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub

	}

	public SymtomListResponseObject getmSymtomsList() {
		return mSymtomsList;
	}

	public void setmSymtomsList(SymtomListResponseObject mSymtomsList) {
		this.mSymtomsList = mSymtomsList;
	}

	public boolean isFromEHR() {
		return isFromEHR;
	}

	public void setFromEHR(boolean isFromEHR) {
		this.isFromEHR = isFromEHR;
	}

	static final MenuDialog.MenuItem[] MAIN_MENU_LIST = {
			new MenuDialog.MenuItem(0, R.string.mild),
			new MenuDialog.MenuItem(0, R.string.severe),
			new MenuDialog.MenuItem(0, R.string.high), };

	@Override
	public void updateUI(String message) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateUI(String message, int position) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateUI(int position) {
		// TODO Auto-generated method stub
		mSelectedSymtom = this.mSymtomsList.RESPONSE.get(position);
		LayoutInflater factory = LayoutInflater.from(getActivity());
		View textEntryView = factory.inflate(R.layout.alert_symtom_cell, null);

		AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());

		alert.setTitle("Select Symtoms");
		// Set an EditText view to get user input
		alert.setView(textEntryView);

		final Spinner input = (Spinner) textEntryView
				.findViewById(R.id.sSymtoms);

		final EditText desctription = (EditText) textEntryView
				.findViewById(R.id.description);

		if (mSelectedSymtom.mSymtomType != null) {
			if (mSelectedSymtom.getmSymtomType() == SymTomType.Mild) {
				input.setSelection(0);
			} else if (mSelectedSymtom.getmSymtomType() == SymTomType.Moderate) {
				input.setSelection(1);
			} else if (mSelectedSymtom.getmSymtomType() == SymTomType.Severe) {
				input.setSelection(2);
			}
		}

		if (mSelectedSymtom.mDescription != null
				&& mSelectedSymtom.mDescription.length() > 0) {
			desctription.setText(mSelectedSymtom.mDescription);
		}
		alert.setPositiveButton("Save", new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int whichButton) {

				if (desctription.getText().toString() != null
						&& desctription.getText().toString().length() > 0) {
					int pos = input.getSelectedItemPosition();
					if (pos == 0) {
						mSelectedSymtom.setmSymtomType(SymTomType.Mild);
					} else if (pos == 1)
						mSelectedSymtom.setmSymtomType(SymTomType.Moderate);
					else if (pos == 2) {
						mSelectedSymtom.setmSymtomType(SymTomType.Severe);
					}
					mSelectedSymtom.setmDescription(desctription.getText()
							.toString());
				} else {
					mSelectedSymtom.setSelected(false);
					showAlert("Please add description!");
				}
			}

		});

		alert.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						// Canceled.
						mSelectedSymtom.setSelected(false);
						populateUI();
					}
				});

		alert.show();
	}

	public void showAlert(String name) {
		UIUtilities.showConfirmationAlert(getActivity(),
				R.string.dialog_title_information, name,
				R.string.dialog_button_Ok,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						populateUI();
					}
				});
	}

}
