package app.nichepro.responsehandler;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.ErrorResponseObject;
import app.nichepro.model.HospitalListResponseObject;
import app.nichepro.model.LoginResponseObject;
import app.nichepro.model.PartyListResponseObject;
import app.nichepro.model.PatientDiagnosisListResponseObject;
import app.nichepro.model.PatientMedicationListResponseObject;
import app.nichepro.model.PatientNoteListResponseObject;

import com.google.gson.Gson;

public interface BaseParser {
	ArrayList<BaseResponseObject> getParsedData(String data);
}


class UnknownParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		ErrorResponseObject ero = new ErrorResponseObject();
		ero.setErrorText("Server returned and error");
		items.add(ero);
		return items;
	}
}

class ErrorParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		ErrorResponseObject ero = new ErrorResponseObject();
		ero.setErrorText(data);
		items.add(ero);
		return items;
	}
}

class LoginParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		LoginResponseObject lro = new LoginResponseObject();
		lro.setLoggedIn(false);
		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("_LOGIN_PASSED_")) {
					lro.setLoggedIn(Boolean.parseBoolean(json
							.getString("_LOGIN_PASSED_")));
				}
				if (json.has("partyId")) {
					lro.setPartyId(json.getString("partyId"));
				}
			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		items.add(lro);
		return items;
	}

}

class RegistrationParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		LoginResponseObject lro = new LoginResponseObject();
		lro.setLoggedIn(false);

		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("_LOGIN_PASSED_")) {
					lro.setLoggedIn(Boolean.parseBoolean(json
							.getString("_LOGIN_PASSED_")));
					lro.setNewlyRegistered(true);
				}
				if (json.has("partyId")) {
					lro.setPartyId(json.getString("partyId"));
				}
			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		items.add(lro);
		return items;
	}

}

class AddPatientNoteParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		LoginResponseObject lro = new LoginResponseObject();
		lro.setLoggedIn(false);

		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("_LOGIN_PASSED_")) {
					lro.setLoggedIn(Boolean.parseBoolean(json
							.getString("_LOGIN_PASSED_")));
					lro.setNewlyRegistered(true);
				}
				if (json.has("partyId")) {
					lro.setPartyId(json.getString("partyId"));
				}
			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		items.add(lro);
		return items;
	}

}

class ListPatientNoteParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();

		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("note")) {
					Gson gson = new Gson();
					PatientNoteListResponseObject pnlro = gson.fromJson(data,
							PatientNoteListResponseObject.class);
					items.add(pnlro);
				}

			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return items;
	}

}

class PatientMedicationListParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();

		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("MEDICATION_LIST")) {
					Gson gson = new Gson();
					PatientMedicationListResponseObject pmlro = gson.fromJson(
							data, PatientMedicationListResponseObject.class);
					items.add(pmlro);
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}

		return items;
	}

}

class PatientNoteParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		BaseResponseObject bro = new BaseResponseObject();
		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("patientnote")) {
					bro.setResult("Success");
				}

			}
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		items.add(bro);
		return items;
	}

}

class PartyListPareser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("party")) {
					Gson gson = new Gson();
					PartyListResponseObject plro = gson.fromJson(
							data, PartyListResponseObject.class);
					items.add(plro);
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}

		return items;
	}

}

class HospitalListPareser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		// TODO Auto-generated method stub
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();
		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("lospitals")) {
					JSONArray jArray = json.getJSONArray("lospitals");
					if (jArray != null && jArray.length() > 0) {
						Gson gson = new Gson();
						HospitalListResponseObject hlro = gson.fromJson(
								data, HospitalListResponseObject.class);
						items.add(hlro);
					}else{
						BaseResponseObject bro = new BaseResponseObject();
						bro.setResult("No Hospital found");
						items.add(bro);
					}
				}else{
					BaseResponseObject bro = new BaseResponseObject();
					bro.setResult("No Hospital found");
					items.add(bro);
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}

		return items;
	}

}

class PatientDiagnosisListParser implements BaseParser {

	@Override
	public ArrayList<BaseResponseObject> getParsedData(String data) {
		ArrayList<BaseResponseObject> items = new ArrayList<BaseResponseObject>();

		JSONObject json = null;

		try {
			json = new JSONObject(data);
			if (json != null) {
				if (json.has("DIAGNOSIS_LIST")) {
					Gson gson = new Gson();
					PatientDiagnosisListResponseObject pmlro = gson.fromJson(
							data, PatientDiagnosisListResponseObject.class);
					items.add(pmlro);
				}
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}

		return items;
	}

}