package app.nichepro.fragmenttabpatient.info;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.ViewAnimator;
import app.nichepro.HealthCareApp;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.R;
import app.nichepro.animation.AnimationFactory;
import app.nichepro.animation.AnimationFactory.FlipDirection;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.HospitalListResponseObject;
import app.nichepro.model.HospitalResponseObject;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class PatientInfoHospitalListFragment extends BaseFragment implements
		OnClickListener, ResponseParserListener {

	private String[] stateCode;
	Boolean isToggle;
	Button btn_list_of_hospitals, btn_hospital_search;

	ViewAnimator viewAnimator;
	private WebRequestTask infoRequestTask;
	private ResponseMesssagType msgType;

	ArrayList<String> infoData;

	HospitalListResponseObject mHospitalData;
	private ListView hospitalListView;
	private ListView hospitalSearchListView;
	private LayoutInflater minflater;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		View view = inflater.inflate(
				R.layout.patient_info_hospital_list_screen, container, false);

		setStateCode();
		this.minflater = inflater;

		isToggle = true;

		viewAnimator = (ViewAnimator) view.findViewById(R.id.viewFlipper);

		infoData = new ArrayList<String>();

		infoData.add("Location Based");
		infoData.add("ZipCode");
		infoData.add("Hospital Name");
		infoData.add("City");
		infoData.add("State");

		hospitalSearchListView = (ListView) view
				.findViewById(R.id.lvHospitalSearch);

		hospitalListView = (ListView) view.findViewById(R.id.lvHospitalList);

		btn_list_of_hospitals = (Button) view
				.findViewById(R.id.bListOfHospitals);
		btn_hospital_search = (Button) view.findViewById(R.id.bSearchHospital);
		btn_list_of_hospitals.setSelected(true);
		btn_list_of_hospitals.setOnClickListener(this);
		btn_hospital_search.setOnClickListener(this);
		createSearchList();
		createHospitalList();

		return view;
	}

	void createSearchList() {
		ArrayAdapter<String> listAdapter = new PatientInfoListAdapter(
				minflater.getContext(), minflater, R.layout.patient_list_cell);
		for (String element : infoData) {
			listAdapter.add(element);
		}
		hospitalSearchListView.setAdapter(listAdapter);

		hospitalSearchListView
				.setOnItemClickListener(new AdapterView.OnItemClickListener() {
					public void onItemClick(AdapterView<?> parent,
							final View view, int position, long id) {

						if (position == 0) {
							initiateLocationRequest();
						}  else if (position == 4) {
							// State
							launchStateAlertDialog();
						} else {
							launchAlertDialog(position);
						}
					}
				});
	}

	void createHospitalList() {
		// Creating the list adapter and populating the hospital list
		ArrayAdapter<HospitalResponseObject> listAdapter1 = new PatientInfoHospitalAdapter(
				minflater.getContext(), minflater, R.layout.hospital_list_cell);

		for (HospitalResponseObject lospitals : mHospitalData.lospitals) {
			listAdapter1.add(lospitals);

		}
		hospitalListView.setAdapter(listAdapter1);
		hospitalListView
				.setOnItemClickListener(new AdapterView.OnItemClickListener() {
					public void onItemClick(AdapterView<?> parent,
							final View view, int position, long id) {

						if (mHospitalData.lospitals.size() > position) {
							PatientInfoHospitalDetailFragment pihdf = new PatientInfoHospitalDetailFragment();
							HospitalResponseObject hro = mHospitalData.lospitals
									.get(position);
							pihdf.url = hro.webSiteId;
							pihdf.header = hro.facilityName;
							mActivity.pushFragments(Constants.TAB_INFO, pihdf,
									true, true);

						} else {
							UIUtilities.showConfirmationAlert(getActivity(),
									R.string.dialog_title_information,
									"Hospital detail not found",
									R.string.dialog_button_Ok,
									new DialogInterface.OnClickListener() {
										public void onClick(
												DialogInterface dialog,
												int which) {

										}
									});
						}

					}
				});
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {

		case R.id.bListOfHospitals:
			if (isToggle == false) {
				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btn_list_of_hospitals.setTextColor(Color.BLACK);
				btn_hospital_search.setTextColor(Color.WHITE);
				btn_list_of_hospitals.setSelected(true);
				btn_hospital_search.setSelected(false);
			}
			isToggle = true;
			break;

		case R.id.bSearchHospital:
			if (isToggle == true) {
				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btn_hospital_search.setTextColor(Color.BLACK);
				btn_list_of_hospitals.setTextColor(Color.WHITE);
				btn_hospital_search.setSelected(true);
				btn_list_of_hospitals.setSelected(false);
			}
			isToggle = false;
			break;
		}

	}

	void initiateLocationRequest() {

		HealthCareApp myApp = (HealthCareApp) getActivity().getApplication();
		LocationManager lm = myApp.getLocationManager();
		Location location = null;

		LocationListener locationListener = new LocationListener() {
			public void onLocationChanged(Location location) {
				// Called when a new location is found by the network location
				// provider.
				// makeUseOfNewLocation(location);
				Log.i("Location", "location");
			}

			public void onStatusChanged(String provider, int status,
					Bundle extras) {
				Log.i("Location", "location");

			}

			public void onProviderEnabled(String provider) {
				Log.i("Location", "location");

			}

			public void onProviderDisabled(String provider) {
				Log.i("Location", "location");

			}
		};
		boolean isGpsOn = true;
		if (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,
					locationListener);
			location = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		} else {
			isGpsOn = false;
			gpsNotOn();
		}

		if (location != null) {
			double longitude = location.getLongitude();
			double latitude = location.getLatitude();
			String strcurrentZip = null;

			Geocoder geocoder = new Geocoder(getActivity(), Locale.getDefault());
			{
				try {
					List<Address> addresses = geocoder.getFromLocation(
							40.764504, -73.963470, 1);

					if (addresses != null) {
						Address returnedZip = addresses.get(0);
						if (returnedZip != null) {
							strcurrentZip = returnedZip.getPostalCode();
							if (strcurrentZip != null
									&& !strcurrentZip.isEmpty()) {
								infoRequestTask = new WebRequestTask(
										WebLinks.getLink(WebLinks.HOSPITAL_LIST),
										getActivity(), this);
								infoRequestTask.AddParam(
										Constants.PARAM_postalCode,
										strcurrentZip);

								infoRequestTask.execute();
							} else {
								addressNotfound();
							}

						}

					} else {
						addressNotfound();
					}
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					// m_zip.setText("zip not found!");
				}
			}
		} else  if(isGpsOn == true){
			// Location not found
			
			addressNotfound();
		}
	}

	void addressNotfound() {
		UIUtilities.showConfirmationAlert(getActivity(),
				R.string.dialog_title_information, "Location not found",
				R.string.dialog_button_Ok,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {

					}
				});
	}
	void gpsNotOn() {
		UIUtilities.showConfirmationAlert(getActivity(),
				R.string.dialog_title_information, "Please turn on GPS of your device",
				R.string.dialog_button_Ok,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {

					}
				});
	}
	void launchCityAlertDialog() {

		LayoutInflater factory = LayoutInflater.from(getActivity());
		final View textEntryView = factory.inflate(
				R.layout.list_of_city_spinner, null);

		AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());

		alert.setTitle("Select City");
		// Set an EditText view to get user input
		alert.setView(textEntryView);

		final Spinner input = (Spinner) textEntryView
				.findViewById(R.id.city_spinner);

		alert.setPositiveButton("Search",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						initiateHospitalSearch(3, input.getSelectedItem()
								.toString());
					}
				});

		alert.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						// Canceled.
					}
				});

		alert.show();

	}

	void launchStateAlertDialog() {

		LayoutInflater factory = LayoutInflater.from(getActivity());
		final View textEntryView = factory.inflate(R.layout.list_of_state_spinner,
				null);

		AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());

		alert.setTitle("Select State");
		// Set an EditText view to get user input
		alert.setView(textEntryView);

		final Spinner input = (Spinner) textEntryView
				.findViewById(R.id.state_spinner);

		alert.setPositiveButton("Select",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						initiateHospitalSearch(4, stateCode[input.getSelectedItemPosition()] );
					}
				});

		alert.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						// Canceled.
					}
				});

		alert.show();

	}

	void launchAlertDialog(final int position) {

		LayoutInflater factory = LayoutInflater.from(getActivity());
		final View textEntryView = factory.inflate(
				R.layout.hospitalsearchalertbox, null);

		AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());

		alert.setTitle("Search by " + infoData.get(position));
		alert.setMessage("Enter your Search keyword");
		// Set an EditText view to get user input
		alert.setView(textEntryView);

		final EditText input = (EditText) textEntryView
				.findViewById(R.id.etSearch);

		alert.setPositiveButton("Search",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						initiateHospitalSearch(position, input.getText()
								.toString());
					}
				});

		alert.setNegativeButton("Cancel",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {
						// Canceled.
					}
				});

		alert.show();

	}

	public void initiateHospitalSearch(int position, String searchKeyWord) {
		infoRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.HOSPITAL_LIST), getActivity(), this);
		switch (position) {
		case 1:// Postal Code
		{
			infoRequestTask.AddParam(Constants.PARAM_postalCode, searchKeyWord);
		}
			break;
		case 2:// Hospital Name
		{
			infoRequestTask.AddParam(Constants.PARAM_hospitalName,
					searchKeyWord);
		}
			break;
		case 3:// City
		{
			infoRequestTask.AddParam(Constants.PARAM_city, searchKeyWord);
		}
			break;
		case 4: // State
		{
			infoRequestTask.AddParam(Constants.PARAM_state, searchKeyWord);
		}
			break;
		default:
			break;
		}
		infoRequestTask.execute();

	}

	public ResponseMesssagType getMsgType() {
		return msgType;
	}

	public void setMsgType(ResponseMesssagType msgType) {
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;

	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		if (this.msgType == ResponseMesssagType.HospitalListMessageType) {
			BaseResponseObject bro = items.get(0);
			if (bro instanceof HospitalListResponseObject) {
				this.mHospitalData = (HospitalListResponseObject) bro;
				createHospitalList();
				if (isToggle == false) {
					AnimationFactory.flipTransition(viewAnimator,
							FlipDirection.LEFT_RIGHT);
					btn_list_of_hospitals.setTextColor(Color.BLACK);
					btn_hospital_search.setTextColor(Color.WHITE);
					btn_list_of_hospitals.setSelected(true);
					btn_hospital_search.setSelected(false);
				}
				isToggle = true;
			} else {
				UIUtilities.showConfirmationAlert(getActivity(),
						R.string.dialog_title_information, bro.getResult(),
						R.string.dialog_button_Ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {

							}
						});
			}
		}

	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub
		UIUtilities.showConfirmationAlert(getActivity(),
				R.string.dialog_title_information, ex.getMessage(),
				R.string.dialog_button_Ok,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {

					}
				});
	}

	public String getStateCode(int position) {
		return stateCode[position];
	}

	public void setStateCode() {
		this.stateCode = getResources().getStringArray(R.array.state_code_array);
	}



}
