package app.nichepro.fragmenttabsponsor.request;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ViewAnimator;
import app.nichepro.HealthCareApp;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.R;
import app.nichepro.animation.AnimationFactory;
import app.nichepro.animation.AnimationFactory.FlipDirection;
import app.nichepro.fragmenttabpatient.ehr.PatientEHRFragment;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.SponsorShipListResponseObject;
import app.nichepro.model.SponsorShipResponseObject;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.UpdateUiFromAdapterListener;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class SponsorRequestFragment extends BaseFragment implements
		OnClickListener, ResponseParserListener, UpdateUiFromAdapterListener {

	Button pendingRequest;
	Button approvedRequest;
	Button rejectedRequest;
	ViewAnimator viewFlipper;
	LinearLayout pendingView;
	LinearLayout approvedView;
	LinearLayout rejectedView;
	SponsorShipListResponseObject mSponsorListData;
	ListView mPendingRequestList;
	ListView mApprovedRequestList;
	ListView mRejectedRequestList;
	ArrayAdapter<SponsorShipResponseObject> mListAdapter;
	LayoutInflater mInflater;
	private WebRequestTask sponsorRequestTask;
	private ResponseMesssagType msgType;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		mInflater = inflater;
		View view = inflater.inflate(R.layout.sponsor_request_screen,
				container, false);
		mPendingRequestList = (ListView) view
				.findViewById(R.id.pendingsponsoredlist);
		mApprovedRequestList = (ListView) view
				.findViewById(R.id.approvedsponsoredlist);
		mRejectedRequestList = (ListView) view
				.findViewById(R.id.rejectedsponsoredlist);
		pendingView = (LinearLayout) view.findViewById(R.id.pendingrequest);
		approvedView = (LinearLayout) view.findViewById(R.id.approvedrequest);
		rejectedView = (LinearLayout) view.findViewById(R.id.rejectedrequest);
		pendingView.setTag(0);
		approvedView.setTag(1);
		rejectedView.setTag(2);
		pendingRequest = (Button) view.findViewById(R.id.bPending);
		approvedRequest = (Button) view.findViewById(R.id.bApproved);
		rejectedRequest = (Button) view.findViewById(R.id.bRejected);
		viewFlipper = (ViewAnimator) view.findViewById(R.id.ViewFlipper01);

		pendingRequest.setSelected(true);
		pendingRequest.setOnClickListener(this);
		approvedRequest.setOnClickListener(this);
		rejectedRequest.setOnClickListener(this);
		approvedRequest.setTextColor(Color.WHITE);
		rejectedRequest.setTextColor(Color.WHITE);
		requestForSponsorshipList();
		return view;
	}

	void requestForSponsorshipList() {
		sponsorRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.ListOfSponsership), getActivity(),
				this);

		HealthCareApp myApp = (HealthCareApp) getActivity().getApplication();
		sponsorRequestTask.AddParam(Constants.PARAM_partyId, myApp
				.getLoggedInUser().getPartyId());

		sponsorRequestTask.execute();
	}

	void requestForApproveSponsorshipList(SponsorShipResponseObject element) {
		sponsorRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.UpdateSponsership), getActivity(),
				this);

		HealthCareApp myApp = (HealthCareApp) getActivity().getApplication();
		sponsorRequestTask.AddParam(Constants.PARAM_sponsorId, myApp
				.getLoggedInUser().getPartyId());
		sponsorRequestTask.AddParam(Constants.PARAM_requestId,
				element.requestId);
		sponsorRequestTask.AddParam(Constants.PARAM_status,
				Constants.VALUE_APPROVE);

		sponsorRequestTask.execute();
	}

	void requestForRejectSponsorshipList(SponsorShipResponseObject element) {
		sponsorRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.UpdateSponsership), getActivity(),
				this);
		HealthCareApp myApp = (HealthCareApp) getActivity().getApplication();
		sponsorRequestTask.AddParam(Constants.PARAM_sponsorId, myApp
				.getLoggedInUser().getPartyId());
		sponsorRequestTask.AddParam(Constants.PARAM_requestId,
				element.requestId);
		sponsorRequestTask.AddParam(Constants.PARAM_status,
				Constants.VALUE_CANCEL);
		sponsorRequestTask.execute();
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bPending:
			AnimationFactory.flipTransition(viewFlipper,
					FlipDirection.LEFT_RIGHT, pendingView);
			pendingRequest.setTextColor(Color.BLACK);
			approvedRequest.setTextColor(Color.WHITE);
			rejectedRequest.setTextColor(Color.WHITE);
			pendingRequest.setSelected(true);
			approvedRequest.setSelected(false);
			rejectedRequest.setSelected(false);
			PopulatePendingSponsorShip();
			break;
		case R.id.bApproved:
			AnimationFactory.flipTransition(viewFlipper,
					FlipDirection.LEFT_RIGHT, approvedView);
			pendingRequest.setTextColor(Color.WHITE);
			approvedRequest.setTextColor(Color.BLACK);
			rejectedRequest.setTextColor(Color.WHITE);
			pendingRequest.setSelected(false);
			approvedRequest.setSelected(true);
			rejectedRequest.setSelected(false);
			PopulateApprovedSponsorShip();
			break;
		case R.id.bRejected:
			AnimationFactory.flipTransition(viewFlipper,
					FlipDirection.LEFT_RIGHT, rejectedView);
			pendingRequest.setTextColor(Color.WHITE);
			approvedRequest.setTextColor(Color.WHITE);
			rejectedRequest.setTextColor(Color.BLACK);
			pendingRequest.setSelected(false);
			approvedRequest.setSelected(false);
			rejectedRequest.setSelected(true);
			PopulateRejectedSponsorShip();
			break;
		}
	}

	void PopulatePendingSponsorShip() {
		mListAdapter = new SponsorRequestAdapter(mInflater.getContext(),
				mInflater, R.layout.sponsor_request_cell_view, this, "Pending");
		for (SponsorShipResponseObject element : mSponsorListData.RESPONSE) {
			if (element.status != null && element.status.length() > 0
					&& element.status.compareTo("Created") == 0) {
				mListAdapter.add(element);
			}
		}
		mPendingRequestList.setAdapter(mListAdapter);
	}

	void PopulateApprovedSponsorShip() {
		mListAdapter = new SponsorRequestAdapter(mInflater.getContext(),
				mInflater, R.layout.sponsor_request_cell_view, this, "Approved");
		for (SponsorShipResponseObject element : mSponsorListData.RESPONSE) {
			if (element.status != null && element.status.length() > 0
					&& element.status.compareTo("approve") == 0) {
				mListAdapter.add(element);
			}
		}
		mApprovedRequestList.setAdapter(mListAdapter);
	}

	void PopulateRejectedSponsorShip() {
		mListAdapter = new SponsorRequestAdapter(mInflater.getContext(),
				mInflater, R.layout.sponsor_request_cell_view, this, "Rejected");
		for (SponsorShipResponseObject element : mSponsorListData.RESPONSE) {
			if (element.status != null && element.status.length() > 0
					&& element.status.compareTo("cancel") == 0) {
				mListAdapter.add(element);
			}
		}
		mRejectedRequestList.setAdapter(mListAdapter);
	}

	@Override
	public void updateUI(String message) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateUI(int position) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
		if (this.msgType == ResponseMesssagType.SponsorshipListMessageType) {

			if (items != null && !items.isEmpty() && items.size() > 0) {
				SponsorShipListResponseObject palro = (SponsorShipListResponseObject) items
						.get(0);
				if (palro.RESPONSE.size() > 0) {
					this.mSponsorListData = palro;
					PopulatePendingSponsorShip();

				} else {
					UIUtilities.showConfirmationAlert(getActivity(),
							R.string.dialog_title_information,
							"No Request Found", R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {

								}
							});
				}
			}
		} else if (this.msgType == ResponseMesssagType.UpdateSponsorRequestListMessageType) {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					"Your Request is accepted", R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information, "No Request Found",
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}
	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub

	}

	@Override
	public void updateUI(String message, int position) {
		// TODO Auto-generated method stub
		if (message != null && message.length() > 0
				&& message.compareTo("EHR") == 0) {
			SponsorShipResponseObject element = mSponsorListData.RESPONSE
					.get(position);

			PatientEHRFragment pef = new PatientEHRFragment();
			pef.isFromDoctor = true;
			pef.tabName = Constants.TAB_REQUEST;
			pef.patientId = element.partyId;
			mSponsorActivity.pushFragments(Constants.TAB_REQUEST, pef, true,
					true);
		} else if (message != null && message.length() > 0
				&& message.compareTo("ViewRequest") == 0) {
			SponsorShipResponseObject element = mSponsorListData.RESPONSE
					.get(position);

			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information, element.description,
					R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});

		} else if (message != null && message.length() > 0
				&& message.compareTo("Approve") == 0) {

			final SponsorShipResponseObject element = mSponsorListData.RESPONSE
					.get(position);
			AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());

			alert.setTitle(R.string.dialog_title_information);
			alert.setMessage("Press confirm to approve the sponsorship!");
			// Set an EditText view to get user input

			alert.setPositiveButton("Confirm",
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog,
								int whichButton) {

							requestForApproveSponsorshipList(element);
						}
					});

			alert.setNegativeButton("Cancel",
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog,
								int whichButton) {
							// Canceled.
						}
					});

			alert.show();

		} else if (message != null && message.length() > 0
				&& message.compareTo("Rejected") == 0) {

			final SponsorShipResponseObject element = mSponsorListData.RESPONSE
					.get(position);
			AlertDialog.Builder alert = new AlertDialog.Builder(getActivity());

			alert.setTitle(R.string.dialog_title_information);
			alert.setMessage("Press confirm to approve the sponsorship!");
			// Set an EditText view to get user input

			alert.setPositiveButton("Reject",
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog,
								int whichButton) {

							requestForRejectSponsorshipList(element);
						}
					});

			alert.setNegativeButton("Cancel",
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog,
								int whichButton) {
							// Canceled.
						}
					});

			alert.show();
		}
	}
}
