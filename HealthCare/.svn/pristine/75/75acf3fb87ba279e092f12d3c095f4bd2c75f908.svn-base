package app.nichepro.fragmenttabpatient.ehr;

import java.util.ArrayList;

import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.ViewAnimator;
import app.nichepro.HealthCareApp;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.R;
import app.nichepro.animation.AnimationFactory;
import app.nichepro.animation.AnimationFactory.FlipDirection;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.PatientAppointmentListResponseObject;
import app.nichepro.model.PatientAppointmentResponseObject;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class PatientEhrAppointmentsFragment extends BaseFragment implements
		OnClickListener, ResponseParserListener {

	PatientAppointmentListResponseObject mAppointmentData;
	PatientAppointmentListResponseObject mPastAppointmentData;
	private WebRequestTask ehrRequestTask;
	private ResponseMesssagType msgType;
	private Button btnUpEvents;
	private Button btnPrevEvents;
	private Boolean isToggle;
	private ViewAnimator viewAnimator;
	private ListView mUpcomingListView;
	private ListView mPastListView;
	ArrayAdapter<PatientAppointmentResponseObject> mUpcominglistAdapter;
	ArrayAdapter<PatientAppointmentResponseObject> mPastlistAdapter;
	private HealthCareApp myApp;
	public boolean isFromDoctor;
	public String patientId;
	public String patientName;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {

		myApp = (HealthCareApp) getActivity().getApplication();
		View view = inflater.inflate(R.layout.patient_ehr_appointment,
				container, false);

		if (mAppointmentData != null
				&& mAppointmentData.APPOINTMENT_LIST.size() > 0) {
			PatientAppointmentResponseObject paro = mAppointmentData.APPOINTMENT_LIST
					.get(0);
			TextView nameTxt = (TextView) view.findViewById(R.id.patientName);
			nameTxt.setText(paro.patientName);
		}

		mUpcomingListView = (ListView) view
				.findViewById(R.id.patientappointments);

		mPastListView = (ListView) view
				.findViewById(R.id.pastpatientappointmentlist);
		viewAnimator = (ViewAnimator) view.findViewById(R.id.viewFlipper);

		btnUpEvents = (Button) view.findViewById(R.id.up_appointment);
		btnPrevEvents = (Button) view.findViewById(R.id.past_appointment);
		btnUpEvents.setSelected(true);
		isToggle = true;
		btnUpEvents.setOnClickListener(this);
		btnPrevEvents.setOnClickListener(this);
		// Creating the list adapter and populating the list
		mUpcominglistAdapter = new PatientEhrAppointmentAdapter(
				inflater.getContext(), inflater, R.layout.patient_list_app_cell);

		mPastlistAdapter = new PatientEhrAppointmentAdapter(
				inflater.getContext(), inflater, R.layout.patient_list_app_cell);
		populateUpcoming();
		return view;
	}

	void populatePast() {
		for (PatientAppointmentResponseObject element : mPastAppointmentData.APPOINTMENT_LIST) {
			mPastlistAdapter.add(element);

		}
		mPastListView.setAdapter(mPastlistAdapter);
	}

	void populateUpcoming() {
		for (PatientAppointmentResponseObject element : mAppointmentData.APPOINTMENT_LIST) {
			mUpcominglistAdapter.add(element);

		}
		mUpcomingListView.setAdapter(mUpcominglistAdapter);
	}

	public void requestForPastEvents() {
		ehrRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.APPOINTMENT_LIST), getActivity(),
				this);

		if (isFromDoctor) {
			ehrRequestTask.AddParam(Constants.PARAM_patientId, patientId);
		} else
			ehrRequestTask.AddParam(Constants.PARAM_patientId, myApp
					.getLoggedInUser().getPartyId());

		ehrRequestTask.AddParam(Constants.PARAM_partyType,
				Constants.VALUE_PATIENT);
		ehrRequestTask
				.AddParam(Constants.PARAM_dateValue, Constants.VALUE_PAST);
		ehrRequestTask.execute();
	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
		if (this.msgType == ResponseMesssagType.PatientAppointmentListMessageType) {
			if (items != null && !items.isEmpty() && items.size() > 0) {

				PatientAppointmentListResponseObject palro = (PatientAppointmentListResponseObject) items
						.get(0);
				if (palro.APPOINTMENT_LIST.size() > 0) {
					this.mPastAppointmentData = palro;
					populatePast();
				} else {
					UIUtilities.showConfirmationAlert(getActivity(),
							R.string.dialog_title_information,
							"No Past Appointment found",
							R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {

								}
							});
				}

			}
		} else {
			UIUtilities.showConfirmationAlert(getActivity(),
					R.string.dialog_title_information,
					R.string.server_error, R.string.dialog_button_Ok,
					new DialogInterface.OnClickListener() {
						public void onClick(DialogInterface dialog, int which) {

						}
					});
		}
	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub

		switch (v.getId()) {
		case R.id.up_appointment:
			if (isToggle == false) {
				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btnUpEvents.setTextColor(Color.BLACK);
				btnPrevEvents.setTextColor(Color.WHITE);
				btnUpEvents.setSelected(true);
				btnPrevEvents.setSelected(false);
			}
			isToggle = true;
			break;
		case R.id.past_appointment:
			if (isToggle == true) {
				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btnUpEvents.setTextColor(Color.WHITE);
				btnPrevEvents.setTextColor(Color.BLACK);
				btnUpEvents.setSelected(false);
				btnPrevEvents.setSelected(true);
				if (this.mPastAppointmentData == null) {
					requestForPastEvents();
				}
			}
			isToggle = false;
			break;
		}

	}
}
