package app.nichepro.activities.healthcare;

import java.util.ArrayList;
import java.util.Calendar;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import app.nichepro.HealthCareApp;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.LoginResponseObject;
import app.nichepro.model.db.UserRegistrationInfo;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.EnumFactory.LoginType;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;

public class PatientRegisterationActivity extends Activity implements
		OnClickListener, ResponseParserListener {

	EditText salutation;
	EditText firstName;
	EditText middleName;
	EditText lastName;
	EditText dateOfBirth;
	EditText zipCode;
	EditText phoneNumber;
	EditText email;
	EditText password;
	EditText confirmPassword;
	EditText specialization;
	Spinner city, state, gender;
	Button register;
	String tFirstName, tLastName, tMiddleName, tDob, tCity, tState, tZip,
			tPhone, tEmail, tPass, tConPass, tGender, tSalutation, tSpecialization;

	private int year;
	private int month;
	private int day;
	Dialog progress;
	String loginType;
	WebRequestTask registrationRequestTask;

	static final int DATE_DIALOG_ID = 999;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.register);
		Intent intent = getIntent();
		loginType = intent.getStringExtra("loginType");
		if (loginType != null && !loginType.isEmpty()) {
			TextView title = (TextView) findViewById(R.id.registrationtitle);
			title.setText(loginType);
		}
		salutation = (EditText) findViewById(R.id.etSalutation);
		firstName = (EditText) findViewById(R.id.etFirstName);
		middleName = (EditText) findViewById(R.id.etMiddleName);
		lastName = (EditText) findViewById(R.id.etLastName);
		firstName.setOnClickListener(this);
		dateOfBirth = (EditText) findViewById(R.id.etDOB);
		zipCode = (EditText) findViewById(R.id.etZipCode);
		phoneNumber = (EditText) findViewById(R.id.etPhoneNum);
		email = (EditText) findViewById(R.id.etEmail);
		password = (EditText) findViewById(R.id.etRegPassword);
		confirmPassword = (EditText) findViewById(R.id.etRegConfirmPass);
		register = (Button) findViewById(R.id.bRegister);
		specialization = (EditText) findViewById(R.id.etSpecialization);
		city = (Spinner) findViewById(R.id.sCity);
		state = (Spinner) findViewById(R.id.sState);
		gender = (Spinner) findViewById(R.id.sGender);

		final Calendar c = Calendar.getInstance();
		year = c.get(Calendar.YEAR);
		month = c.get(Calendar.MONTH);
		day = c.get(Calendar.DAY_OF_MONTH);

		register.setOnClickListener(this);
		dateOfBirth.setOnClickListener(this);
	}

	@SuppressWarnings("deprecation")
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.etName:
			UIUtilities.showKeyboard(this, firstName);
			break;
		case R.id.bRegister:
			tFirstName = firstName.getText().toString();
			tLastName = lastName.getText().toString();
			tDob = dateOfBirth.getText().toString();
			tCity = city.toString();
			tState = state.toString();
			tZip = zipCode.getText().toString();
			tPhone = phoneNumber.getText().toString();
			tEmail = email.getText().toString();
			tPass = password.getText().toString();
			tConPass = confirmPassword.getText().toString();
			tSpecialization = specialization.getText().toString();
			tGender = gender.toString();
			boolean emailCheck;
			emailCheck = UIUtilities.isEmailValid(tEmail);

			if (tFirstName.matches("") || tLastName.matches("")
					|| tDob.matches("") || tCity.matches("")
					|| tState.matches("") || tZip.matches("")
					|| tPhone.matches("") || tEmail.matches("")
					|| tPass.matches("") || tConPass.matches("") || tGender.matches("")) {
				UIUtilities.showConfirmationAlert(this,
						R.string.dialog_title_information,
						R.string.fill_all_details, R.string.dialog_button_Ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog,
									int which) {
							}
						});
			}

			else {
				if (!tPass.equals(tConPass)) {
					UIUtilities.showConfirmationAlert(this,
							R.string.dialog_title_information,
							R.string.password_cpassowrd_should_be_same,
							R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
								}
							});
				}

				else if (!emailCheck) {
					UIUtilities.showConfirmationAlert(this,
							R.string.dialog_title_information,
							R.string.invalid_email, R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
								}
							});
				}

				else if (tPhone.length() < 10) {
					UIUtilities.showConfirmationAlert(this,
							R.string.dialog_title_information,
							R.string.invalid_phone, R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
								}
							});
				}

				else if (tPass.length() < 6) {
					UIUtilities.showConfirmationAlert(this,
							R.string.dialog_title_information,
							R.string.invalid_password,
							R.string.dialog_button_Ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
								}
							});
				}

				else {
					final UserRegistrationInfo user = new UserRegistrationInfo();
					user.setUsername(this.tEmail);
					user.setFirstname(this.tFirstName);
					user.setLastname(this.tLastName);
					user.setGender(this.tGender);
					user.setSalutation(this.tSalutation);
					user.setMiddlename(this.tMiddleName);
					user.setDob(this.tDob);
					user.setCity(this.tCity);
					user.setState(this.tState);
					user.setZipcode(this.tZip);
					user.setPhonenumber(this.tPhone);
					user.setEmail(this.tEmail);
					user.setPassword(this.tPass);
					user.setCpassword(this.tConPass);
					user.setSpecialization(this.tSpecialization);
					registrationRequestTask = null;
					if (loginType.compareTo(LoginType.Patient.name()) == 0) {
						registrationRequestTask = new WebRequestTask(
								WebLinks.getLink(WebLinks.PATIENT_REGISTRATION),
								this, this);
						registrationRequestTask.AddParam(
								Constants.PARAM_specializationand, "aa");
						registrationRequestTask.AddParam(
								Constants.PARAM_roleTypeId, Constants.VALUE_PATIENT);

					} else if (loginType.compareTo(LoginType.Doctor.name()) == 0) {
						registrationRequestTask = new WebRequestTask(
								WebLinks.getLink(WebLinks.DOCTOR_REGISTRATION),
								this, this);
						registrationRequestTask.AddParam(
								Constants.PARAM_roleTypeId,Constants.VALUE_DOCTOR);

					} else {// Sponsor
						registrationRequestTask = new WebRequestTask(
								WebLinks.getLink(WebLinks.SPONSOR_REGISTRATION),
								this, this);
						registrationRequestTask.AddParam(
								Constants.PARAM_roleTypeId, Constants.VALUE_SPONSOR);

					}

					registrationRequestTask.AddParam(
							Constants.PARAM_salutation, "Mr");
					registrationRequestTask.AddParam(Constants.PARAM_firstName,
							user.getFirstname());
					registrationRequestTask.AddParam(
							Constants.PARAM_middleName, user.getMiddlename());
					registrationRequestTask.AddParam(Constants.PARAM_lastName,
							user.getLastname());
					registrationRequestTask.AddParam(Constants.PARAM_gender,
							"Male");
					registrationRequestTask.AddParam(Constants.PARAM_birthDate,
							user.getDob());
					registrationRequestTask.AddParam(Constants.PARAM_mobileNo,
							user.getPhonenumber());
					registrationRequestTask.AddParam(
							Constants.PARAM_userLoginId, user.getUsername());
					registrationRequestTask.AddParam(
							Constants.PARAM_currentPassword,
							user.getPassword());
					registrationRequestTask.AddParam(
							Constants.PARAM_currentPasswordVerify,
							user.getCpassword());

					registrationRequestTask.execute();

				}

			}

			break;
		case R.id.etDOB:
			showDialog(DATE_DIALOG_ID);
			break;
		}
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		switch (id) {
		case DATE_DIALOG_ID:
			// set date picker as current date
			return new DatePickerDialog(this, datePickerListener, year, month,
					day);
		}
		return null;
	}

	private DatePickerDialog.OnDateSetListener datePickerListener = new DatePickerDialog.OnDateSetListener() {

		// when dialog box is closed, below method will be called.
		public void onDateSet(DatePicker view, int selectedYear,
				int selectedMonth, int selectedDay) {
			year = selectedYear;
			month = selectedMonth;
			day = selectedDay;

			// set selected date into textview
			dateOfBirth.setText(new StringBuilder().append(month + 1)
					.append("/").append(day).append("/").append(year)
					.append(" "));

		}
	};

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

		if (items != null && !items.isEmpty() && items.size() > 0) {
			LoginResponseObject lro = (LoginResponseObject) items.get(0);
			HealthCareApp myApp = (HealthCareApp)getApplication();
			myApp.setLoggedInUser(lro);
			if (lro.isLoggedIn()) {
				UIUtilities.showConfirmationAlert(this,
						R.string.dialog_title_information, "Registed Successfully",
						R.string.dialog_button_Ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
								finish();
							}
						});
			}else{
				UIUtilities.showConfirmationAlert(this,
						R.string.dialog_title_information, "User Already Exist!",
						R.string.dialog_button_Ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {

							}
						});

			}
		}
	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
		
	}

}
