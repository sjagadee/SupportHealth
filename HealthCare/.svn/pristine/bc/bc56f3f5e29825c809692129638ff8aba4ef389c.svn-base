package app.nichepro.fragmenttabpatient.queries;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.text.InputType;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.ViewAnimator;
import app.nichepro.activities.healthcare.BaseFragment;
import app.nichepro.activities.healthcare.R;
import app.nichepro.animation.AnimationFactory;
import app.nichepro.animation.AnimationFactory.FlipDirection;
import app.nichepro.fragmenttabpatient.ehr.PatientEhrAllergiesFragment;
import app.nichepro.fragmenttabpatient.ehr.PatientEhrAppointmentsFragment;
import app.nichepro.fragmenttabpatient.ehr.PatientEhrDiagnosisFragment;
import app.nichepro.fragmenttabpatient.ehr.PatientEhrMedicationFragment;
import app.nichepro.fragmenttabpatient.ehr.PatientEhrShareHealthRecordFragment;
import app.nichepro.fragmenttabpatient.ehr.PatientEhrVitalStatFragment;
import app.nichepro.model.BaseResponseObject;
import app.nichepro.model.MessageListResponseObject;
import app.nichepro.model.PartyListResponseObject;
import app.nichepro.model.PatientAppointmentListResponseObject;
import app.nichepro.model.PatientDiagnosisListResponseObject;
import app.nichepro.model.PatientMedicationListResponseObject;
import app.nichepro.model.PatientVitalStatListResponseObject;
import app.nichepro.model.db.EmailMessage;
import app.nichepro.responsehandler.ResponseParserListener;
import app.nichepro.util.Constants;
import app.nichepro.util.UIUtilities;
import app.nichepro.util.WebLinks;
import app.nichepro.util.WebRequestTask;
import app.nichepro.util.EnumFactory.ResponseMesssagType;
import app.nichepro.util.db.DbUtils;

public class PatientQueryFragment extends BaseFragment implements
		OnClickListener, OnTouchListener,ResponseParserListener {

	protected CharSequence[] colours = { "Red", "Green", "Blue", "Yellow",
			"Orange", "Purple" };
	public PartyListResponseObject doctorListObject;

	protected ArrayList<CharSequence> selectedColours = new ArrayList<CharSequence>();
	Button btnMsgList;
	Button btnSendMsg;
	Boolean isToggle;
	String tDoctorName, tSubject, tMessage;
	Dialog progress;
	EditText selectDoctorName;
	EditText subject;
	EditText message;
	Boolean isSelected;
	ViewAnimator viewAnimator;
	ArrayList<MessageListResponseObject> msgList;
	WebRequestTask ehrRequestTask;
	private ResponseMesssagType msgType;
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		isSelected = false;
		View view = inflater.inflate(R.layout.patient_query_screen, container,
				false);
		EmailMessage emailMsg = new EmailMessage();
		emailMsg.setUsername("Mr. John");
		msgList = DbUtils.retreiveMsgList(getActivity(), emailMsg);

		ListView list = (ListView) view
				.findViewById(R.id.patient_communication);

		// Creating the list adapter and populating the list
		ArrayAdapter<EmailMessage> listAdapter = new EmailListAdapter(
				inflater.getContext(), inflater,
				R.layout.email_message_list_cell);

		for (MessageListResponseObject msg : msgList) {
			EmailMessage eMsg = msg.msgList.get(0);
			eMsg.setQty("" + msg.msgList.size());
			listAdapter.add(eMsg);

		}
		list.setAdapter(listAdapter);
		list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
			public void onItemClick(AdapterView<?> parent, final View view,
					int position, long id) {
				MessageListResponseObject mlro = msgList.get(position);
				EmailListFragment edf = new EmailListFragment();
				edf.msgList = mlro;
				mActivity.pushFragments(Constants.TAB_QUERIES, edf, true, true);
			}
		});
		viewAnimator = (ViewAnimator) view.findViewById(R.id.viewFlipper);

		btnMsgList = (Button) view.findViewById(R.id.msg_list);
		btnSendMsg = (Button) view.findViewById(R.id.send_msg);
		btnMsgList.setSelected(true);
		isToggle = true;
		btnMsgList.setOnClickListener(this);
		btnSendMsg.setOnClickListener(this);

		selectDoctorName = (EditText) view.findViewById(R.id.bSelect);
		selectDoctorName.setOnTouchListener(this);
		selectDoctorName.setInputType(InputType.TYPE_NULL); // disable soft
															// input
		subject = (EditText) view.findViewById(R.id.etSubjectMessage);
		message = (EditText) view.findViewById(R.id.etMessageCommunicate);
		Button send = (Button) view.findViewById(R.id.bSendCommunicate);

		send.setOnClickListener(this);

		return view;
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {

		case R.id.msg_list:
			if (isToggle == false) {
				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btnMsgList.setTextColor(Color.BLACK);
				btnSendMsg.setTextColor(Color.WHITE);
				btnMsgList.setSelected(true);
				btnSendMsg.setSelected(false);
			}
			isToggle = true;
			break;
		case R.id.send_msg:
			if (isToggle == true) {

				AnimationFactory.flipTransition(viewAnimator,
						FlipDirection.LEFT_RIGHT);
				btnMsgList.setTextColor(Color.WHITE);
				btnSendMsg.setTextColor(Color.BLACK);
				btnMsgList.setSelected(false);
				btnSendMsg.setSelected(true);
				requestForDoctor();

			}
			isToggle = false;
			break;

		case R.id.bSendCommunicate: {
			// tDoctorName = doctorName.getSelectedItem().toString();
			// tSubject = subject.getText().toString();
			// tMessage = message.getText().toString();
			// EmailMessage msg = new EmailMessage();
			// msg.setUsername(tDoctorName);
			// msg.setSubject(tSubject);
			// msg.setMessage(tMessage);
			// DbUtils.addNewMsg(getActivity(), msg);
			// progress = ProgressDialog.show(getActivity(), "Loading",
			// "Please wait...");
			// Handler handler = new Handler();
			// handler.postDelayed(new Runnable() {
			// public void run() {
			// progress.dismiss();
			//
			// }
			// }, 3000); // 3000 milliseconds
		}
			break;
		}

	}

	public void showSelectColoursDialog() {
		boolean[] checkedColours = new boolean[colours.length];
		int count = colours.length;

		for (int i = 0; i < count; i++)
			checkedColours[i] = selectedColours.contains(colours[i]);

		DialogInterface.OnMultiChoiceClickListener coloursDialogListener = new DialogInterface.OnMultiChoiceClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which,
					boolean isChecked) {
				if (isChecked)
					selectedColours.add(colours[which]);
				else
					selectedColours.remove(colours[which]);

				onChangeSelectedColours();
			}
		};

		AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
		builder.setTitle("Select Colours");
		builder.setMultiChoiceItems(colours, checkedColours,
				coloursDialogListener);
		builder.setPositiveButton("Select",
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int whichButton) {

					}
				});

		AlertDialog dialog = builder.create();
		dialog.show();
	}

	protected void onChangeSelectedColours() {
		StringBuilder stringBuilder = new StringBuilder();

		for (CharSequence colour : selectedColours)
			stringBuilder.append(colour + ",");

		selectDoctorName.setText(stringBuilder.toString());
	}

	@Override
	public boolean onTouch(View v, MotionEvent event) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.bSelect: {
			if (MotionEvent.ACTION_UP == event.getAction()) {
				showSelectColoursDialog();
			}
			break;
		}
		default:
			break;
		}

		return false;
	}

	public void requestForDoctor() {
		ehrRequestTask = new WebRequestTask(
				WebLinks.getLink(WebLinks.ACTOR_LIST), getActivity(), this);

		ehrRequestTask.AddParam(Constants.PARAM_partyType, "Doctor");
		ehrRequestTask.AddParam(Constants.PARAM_roleTypeId, "HC_PROVIDER");
		ehrRequestTask.execute();
	}

	@Override
	public void onEndParsingMsgType(ResponseMesssagType msgType) {
		// TODO Auto-generated method stub
		this.msgType = msgType;
	}

	@Override
	public void onEndParsingResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub
	if (this.msgType == ResponseMesssagType.DoctorListMessageType) {
			if (items != null && !items.isEmpty() && items.size() > 0) {
				this.doctorListObject = (PartyListResponseObject) items
						.get(0);
				

			}
		}
	}

	@Override
	public void onErrorResponse(ArrayList<BaseResponseObject> items) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onError(Exception ex) {
		// TODO Auto-generated method stub
		UIUtilities.showConfirmationAlert(getActivity(),
				R.string.dialog_title_information, ex.getMessage(),
				R.string.dialog_button_Ok,
				new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {

					}
				});
	}

	public ResponseMesssagType getMsgType() {
		return msgType;
	}

	public void setMsgType(ResponseMesssagType msgType) {
		this.msgType = msgType;
	}
}

